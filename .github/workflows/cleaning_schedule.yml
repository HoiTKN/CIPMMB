name: Run Cleaning Schedule Update SharePoint

on:
  schedule:
    # Run daily at 8:00 AM UTC (3:00 PM Vietnam time)
    - cron: '0 0 * * *'
  workflow_dispatch:  # Allows manual triggering
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'

env:
  # SharePoint Configuration
  TENANT_ID: '81060475-7e7f-4ede-8d8d-bf61f53ca528'
  CLIENT_ID: '076541aa-c734-405e-8518-ed52b67f8cbd'
  SHAREPOINT_ACCESS_TOKEN: ${{ secrets.SHAREPOINT_ACCESS_TOKEN }}
  SHAREPOINT_REFRESH_TOKEN: ${{ secrets.SHAREPOINT_REFRESH_TOKEN }}
  
  # Email Configuration
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  
  # GitHub Configuration
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-cleaning-schedule:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write # Required for updating GitHub secrets with refreshed tokens

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-cleaning-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-cleaning-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        echo "üì¶ Installing Python dependencies for CIP Cleaning automation..."
        python -m pip install --upgrade pip
        
        # Core dependencies
        pip install pandas matplotlib requests
        
        # SharePoint dependencies  
        pip install msal pynacl
        
        # Excel processing
        pip install openpyxl xlsxwriter
        
        echo "‚úÖ All dependencies installed. Package list:"
        pip list

    - name: Environment validation
      run: |
        echo "üîß Validating environment variables..."
        
        # SharePoint validation
        echo "SharePoint Configuration:"
        echo "TENANT_ID: ${TENANT_ID:0:8}..."
        echo "CLIENT_ID: ${CLIENT_ID:0:8}..."
        echo "Has SHAREPOINT_ACCESS_TOKEN: $([[ -n "$SHAREPOINT_ACCESS_TOKEN" ]] && echo 'Yes' || echo 'No')"
        echo "Has SHAREPOINT_REFRESH_TOKEN: $([[ -n "$SHAREPOINT_REFRESH_TOKEN" ]] && echo 'Yes' || echo 'No')"
        
        # Email validation
        echo "Email Configuration:"
        echo "Has EMAIL_PASSWORD: $([[ -n "$EMAIL_PASSWORD" ]] && echo 'Yes' || echo 'No')"
        
        # GitHub validation
        echo "GitHub Configuration:"
        echo "Has GITHUB_TOKEN: $([[ -n "$GITHUB_TOKEN" ]] && echo 'Yes' || echo 'No')"
        
        # Check for missing critical variables
        MISSING_VARS=""
        
        if [[ -z "$SHAREPOINT_ACCESS_TOKEN" && -z "$SHAREPOINT_REFRESH_TOKEN" ]]; then
          MISSING_VARS="${MISSING_VARS} SharePoint_tokens"
        fi
        
        if [[ -z "$EMAIL_PASSWORD" ]]; then
          MISSING_VARS="${MISSING_VARS} EMAIL_PASSWORD"
        fi
        
        if [[ -n "$MISSING_VARS" ]]; then
          echo "‚ùå Missing critical environment variables:$MISSING_VARS"
          echo "üí° Please ensure all required secrets are configured in GitHub repository settings."
          exit 1
        fi
        
        echo "‚úÖ Environment validation completed successfully"

    - name: Debug environment (optional)
      if: github.event.inputs.debug_mode == 'true'
      run: |
        echo "üîç Debug mode enabled - Extended environment check"
        echo "Current working directory: $(pwd)"
        echo "Available files:"
        ls -la
        echo ""
        echo "Python version: $(python --version)"
        echo "Pip version: $(pip --version)"
        echo ""
        echo "Environment variables (truncated for security):"
        env | grep -E '^(TENANT_ID|CLIENT_ID|GITHUB_)' | head -10

    - name: Run cleaning schedule update script
      id: cleaning_automation
      env:
        CI: true
        GITHUB_ACTIONS: true
      run: |
        echo "üöÄ Starting CIP Cleaning Schedule Automation with SharePoint integration..."
        echo "üìä Processing flow:"
        echo "  1. Connect to SharePoint"
        echo "  2. Download CIP plan.xlsx"
        echo "  3. Process cleaning schedules"
        echo "  4. Update next cleaning dates and statuses"
        echo "  5. Create summary report"
        echo "  6. Upload updated file to SharePoint"
        echo "  7. Send email notifications for due equipment"
        echo ""
        
        # Run the cleaning automation script and capture exit code
        python main.py 2>&1 | tee cleaning_output.txt
        EXIT_CODE=${PIPESTATUS[0]}
        
        # Check if processing was successful
        if grep -q "CIP Cleaning automation completed successfully!" cleaning_output.txt; then
          echo "‚úÖ CIP Cleaning automation completed successfully"
          echo "automation_success=true" >> $GITHUB_OUTPUT
        elif grep -q "Ho√†n th√†nh c·∫≠p nh·∫≠t" cleaning_output.txt; then
          echo "‚úÖ CIP Cleaning automation completed"
          echo "automation_success=true" >> $GITHUB_OUTPUT
        elif [ $EXIT_CODE -eq 0 ]; then
          echo "‚úÖ CIP Cleaning automation completed"
          echo "automation_success=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå CIP Cleaning automation failed (exit code: $EXIT_CODE)"
          echo "automation_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Create cleaning summary
      if: always()
      run: |
        echo "üìä Creating cleaning summary..."
        
        if [ -f cleaning_output.txt ]; then
          # Extract key metrics from output
          TOTAL_DEVICES=$(grep -oP "ƒê√£ c·∫≠p nh·∫≠t \K\d+" cleaning_output.txt | tail -1 || echo "N/A")
          DUE_DEVICES=$(grep -oP "T·ªïng s·ªë thi·∫øt b·ªã c·∫ßn v·ªá sinh: \K\d+" cleaning_output.txt | tail -1 || echo "N/A")
          EMPTY_DEVICES=$(grep -oP "Thi·∫øt b·ªã tr·ªëng c√≥ th·ªÉ v·ªá sinh ngay: \K\d+" cleaning_output.txt | tail -1 || echo "N/A")
          FILLED_DEVICES=$(grep -oP "Thi·∫øt b·ªã ƒëang ch·ª©a s·∫£n ph·∫©m c·∫ßn l√™n k·∫ø ho·∫°ch: \K\d+" cleaning_output.txt | tail -1 || echo "N/A")
          
          # Check upload status
          UPLOAD_STATUS="Unknown"
          if grep -q "Successfully uploaded updated CIP plan" cleaning_output.txt; then
            UPLOAD_STATUS="‚úÖ Success"
          elif grep -q "Successfully uploaded backup file" cleaning_output.txt; then
            UPLOAD_STATUS="‚ö†Ô∏è Backup uploaded (original locked)"
          elif grep -q "File remains locked" cleaning_output.txt || grep -q "resourceLocked" cleaning_output.txt; then
            UPLOAD_STATUS="‚ùå Failed (file locked)"
          elif grep -q "Failed to upload" cleaning_output.txt; then
            UPLOAD_STATUS="‚ùå Failed"
          fi
          
          # Create summary report
          echo "## üìä CIP Cleaning Schedule Summary" > cleaning_summary.md
          echo "" >> cleaning_summary.md
          echo "- **Status**: ${{ job.status }}" >> cleaning_summary.md
          echo "- **Total Devices Updated**: $TOTAL_DEVICES" >> cleaning_summary.md
          echo "- **Due Devices**: $DUE_DEVICES" >> cleaning_summary.md
          echo "- **Empty Devices (Ready)**: $EMPTY_DEVICES" >> cleaning_summary.md
          echo "- **Filled Devices (Need Planning)**: $FILLED_DEVICES" >> cleaning_summary.md
          echo "- **Upload Status**: $UPLOAD_STATUS" >> cleaning_summary.md
          echo "" >> cleaning_summary.md
          echo "### üìÖ Processing Time" >> cleaning_summary.md
          echo "- **Date**: $(date -u +'%Y-%m-%d')" >> cleaning_summary.md
          echo "- **Time**: $(date -u +'%H:%M:%S %Z')" >> cleaning_summary.md
          echo "- **Vietnam Time**: $(TZ='Asia/Ho_Chi_Minh' date +'%Y-%m-%d %H:%M:%S %Z')" >> cleaning_summary.md
          echo "" >> cleaning_summary.md
          echo "### üîÑ Data Source" >> cleaning_summary.md
          echo "- **Platform**: SharePoint" >> cleaning_summary.md
          echo "- **File**: CIP plan.xlsx" >> cleaning_summary.md
          echo "- **Site**: MCH.MMB.QA" >> cleaning_summary.md
          
          # Add troubleshooting info if upload failed
          if [[ "$UPLOAD_STATUS" == *"Failed"* ]] || [[ "$UPLOAD_STATUS" == *"locked"* ]]; then
            echo "" >> cleaning_summary.md
            echo "### ‚ö†Ô∏è Upload Issue" >> cleaning_summary.md
            echo "The file could not be updated due to SharePoint lock." >> cleaning_summary.md
            echo "This typically happens when someone has the file open." >> cleaning_summary.md
            echo "**Action**: Close the file in SharePoint and re-run the workflow." >> cleaning_summary.md
          fi
          
          echo "‚úÖ Cleaning summary created"
        else
          echo "‚ö†Ô∏è No cleaning output found"
          echo "## ‚ùå Cleaning Automation Failed" > cleaning_summary.md
          echo "No output file was generated during the cleaning process." >> cleaning_summary.md
        fi

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cleaning-schedule-results-${{ github.run_number }}
        path: |
          cleaning_output.txt
          cleaning_summary.md
          *.png
          *.xlsx
        if-no-files-found: ignore

    - name: Cleaning success notification
      if: success()
      run: |
        echo "‚úÖ CIP Cleaning Schedule Automation completed!"
        echo ""
        echo "üéØ Results:"
        if [ -f cleaning_summary.md ]; then
          cat cleaning_summary.md
        fi
        echo ""
        echo "üìç Data location:"
        echo "  - SharePoint: CIP plan.xlsx"
        echo "  - Site: MCH.MMB.QA"
        echo ""
        
        # Check automation status
        if [ "${{ steps.cleaning_automation.outputs.automation_success }}" = "false" ]; then
          echo "‚ö†Ô∏è Note: Some issues occurred during processing"
          echo "üí° Check the logs for details"
        else
          echo "‚úÖ All processes completed successfully"
        fi
        
        echo ""
        echo "üìß Email notifications sent to:"
        echo "  - mmb-ktcncsd@msc.masangroup.com"
        echo "  - mmb-baotri-utilities@msc.masangroup.com (for RO station)"
        echo ""
        echo "üîÑ Next scheduled run: Tomorrow at 3:00 PM Vietnam time (8:00 AM UTC)"

    - name: Cleaning failure notification
      if: failure()
      run: |
        echo "‚ùå CIP Cleaning Schedule Automation failed!"
        echo ""
        echo "üîç Common troubleshooting steps:"
        echo "1. Check if all required secrets are configured:"
        echo "   - SHAREPOINT_ACCESS_TOKEN"
        echo "   - SHAREPOINT_REFRESH_TOKEN" 
        echo "   - EMAIL_PASSWORD"
        echo "   - GITHUB_TOKEN"
        echo ""
        echo "2. SharePoint file access issues:"
        echo "   - Verify SharePoint permissions for CIP plan file"
        echo "   - Check if file is locked/open by another user"
        echo "   - Ensure file ID '8C90FB38-DA8C-59CC-547D-53BEA1C8B16D' is correct"
        echo ""
        echo "3. Data processing issues:"
        echo "   - Check file structure matches expected format"
        echo "   - Verify column names in Excel sheets"
        echo "   - Ensure date formats are readable"
        echo ""
        echo "4. Email configuration:"
        echo "   - Check Outlook SMTP configuration"
        echo "   - Verify EMAIL_PASSWORD secret (should be App Password)"
        echo ""
        echo "üìã Please review the workflow logs and artifacts for detailed error information."
        echo "üí° If file is locked, try running the workflow again after closing the file."

    - name: Cleanup temporary files
      if: always()
      run: |
        echo "üßπ Cleaning up temporary files..."
        rm -f *.tmp
        rm -f temp_*.png
        echo "‚úÖ Cleanup completed"
