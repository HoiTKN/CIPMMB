name: QA Data Processing - Delegation Flow (Daily)

on:
  # Ch·∫°y h√†ng ng√†y l√∫c 8:00 AM Vietnam time (1:00 AM UTC)
  schedule:
    - cron: '0 1 * * *'
  
  # Cho ph√©p ch·∫°y th·ªß c√¥ng
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: 'false'
        type: boolean
      test_mode:
        description: 'Test mode - limited file processing'
        required: false
        default: 'true'
        type: boolean

jobs:
  test-delegation-flow:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
    
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas>=1.5.0 openpyxl>=3.0.0 requests>=2.28.0 msal>=1.24.0
    
    - name: üîç Verify environment and dependencies
      run: |
        echo "Python version: $(python --version)"
        echo "Current directory: $(pwd)"
        echo "Files in directory: $(ls -la)"
        pip list | grep -E "(pandas|msal|requests|openpyxl)"
        echo "Environment check complete"
    
    - name: üîß Test basic configuration
      env:
        TENANT_ID: ${{ secrets.TENANT_ID }}
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        SHAREPOINT_SITE_URL: ${{ secrets.SHAREPOINT_SITE_URL }}
        DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
      run: |
        echo "üß™ Testing delegation flow configuration..."
        echo "Tenant ID: ${TENANT_ID:0:8}..."
        echo "Client ID: ${CLIENT_ID:0:8}..."
        echo "SharePoint Site: $SHAREPOINT_SITE_URL"
        echo "Debug Mode: $DEBUG_MODE"
        echo "Test Mode: $TEST_MODE"
        
        # Test if we can import required modules
        python -c "
        import msal
        import requests
        import pandas as pd
        print('‚úÖ All imports successful')
        
        # Test basic MSAL setup
        try:
            app = msal.PublicClientApplication('$CLIENT_ID', authority='https://login.microsoftonline.com/$TENANT_ID')
            print('‚úÖ MSAL PublicClientApplication created successfully')
        except Exception as e:
            print(f'‚ùå MSAL setup failed: {e}')
        "
    
    - name: üîë Attempt delegation authentication
      env:
        TENANT_ID: ${{ secrets.TENANT_ID }}
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        SHAREPOINT_SITE_URL: ${{ secrets.SHAREPOINT_SITE_URL }}
      run: |
        echo "üîë Attempting delegation authentication..."
        python github_delegation_runner.py
    
    - name: üìä Upload any generated data
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: qa-delegation-results-${{ github.run_number }}
        path: |
          output/
          *.xlsx
          *.csv
          *.json
          *.log
        retention-days: 30
    
    - name: üìã Create processing summary
      if: always()
      run: |
        echo "## üîë Delegation Flow Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Run Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "**Run Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Test Mode**: ${{ github.event.inputs.test_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "output" ]; then
          echo "### üìÅ Generated Files:" >> $GITHUB_STEP_SUMMARY
          ls -la output/ | while read line; do
            echo "- $line" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "### ‚ùå No output files generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Download Results:" >> $GITHUB_STEP_SUMMARY
        echo "Check the **Artifacts** section below to download any generated data." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üí° Notes:" >> $GITHUB_STEP_SUMMARY
        echo "- Delegation flow may require manual authentication setup" >> $GITHUB_STEP_SUMMARY
        echo "- Check logs above for authentication details" >> $GITHUB_STEP_SUMMARY
        echo "- Consider asking IT team about service principal for automation" >> $GITHUB_STEP_SUMMARY
    
    - name: üö® Handle authentication challenges
      if: failure()
      run: |
        echo "‚ùå Delegation Flow Test Failed!"
        echo ""
        echo "üîç Common issues:"
        echo "1. Interactive authentication not possible in GitHub Actions"
        echo "2. Need service principal or pre-authenticated tokens"
        echo "3. SharePoint permissions may require different approach"
        echo ""
        echo "üí° Solutions:"
        echo "1. Ask IT team about service principal with delegated permissions"
        echo "2. Consider hybrid approach (local + GitHub)"
        echo "3. Use application flow with CLIENT_SECRET"
        echo ""
        echo "üìß Message for IT team:"
        echo "Need automation-friendly authentication for SharePoint API access"
        echo "Current delegation flow requires browser interaction"
        exit 1
