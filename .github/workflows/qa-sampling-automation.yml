name: QA Sampling Automation SharePoint

on:
  schedule:
    # Run at 7am Vietnam time (UTC+7) which is midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch:  # Allows manual triggering of the workflow
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'

env:
  # SharePoint Configuration
  TENANT_ID: '81060475-7e7f-4ede-8d8d-bf61f53ca528'
  CLIENT_ID: '076541aa-c734-405e-8518-ed52b67f8cbd'
  SHAREPOINT_ACCESS_TOKEN: ${{ secrets.SHAREPOINT_ACCESS_TOKEN }}
  SHAREPOINT_REFRESH_TOKEN: ${{ secrets.SHAREPOINT_REFRESH_TOKEN }}
  
  # Email Configuration
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  
  # GitHub Configuration
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  run-sampling-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write # Required for updating GitHub secrets with refreshed tokens
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-sampling-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-sampling-
            ${{ runner.os }}-pip-
          
      - name: Install dependencies
        run: |
          echo "üì¶ Installing Python dependencies for QA Sampling automation..."
          python -m pip install --upgrade pip
          
          # Core dependencies
          pip install pandas matplotlib requests
          
          # SharePoint dependencies  
          pip install msal pynacl
          
          # Excel processing
          pip install openpyxl xlsxwriter
          
          echo "‚úÖ All dependencies installed. Package list:"
          pip list

      - name: Environment validation
        run: |
          echo "üîß Validating environment variables..."
          
          # SharePoint validation
          echo "SharePoint Configuration:"
          echo "TENANT_ID: ${TENANT_ID:0:8}..."
          echo "CLIENT_ID: ${CLIENT_ID:0:8}..."
          echo "Has SHAREPOINT_ACCESS_TOKEN: $([[ -n "$SHAREPOINT_ACCESS_TOKEN" ]] && echo 'Yes' || echo 'No')"
          echo "Has SHAREPOINT_REFRESH_TOKEN: $([[ -n "$SHAREPOINT_REFRESH_TOKEN" ]] && echo 'Yes' || echo 'No')"
          
          # Email validation
          echo "Email Configuration:"
          echo "Has EMAIL_PASSWORD: $([[ -n "$EMAIL_PASSWORD" ]] && echo 'Yes' || echo 'No')"
          
          # GitHub validation
          echo "GitHub Configuration:"
          echo "Has GITHUB_TOKEN: $([[ -n "$GITHUB_TOKEN" ]] && echo 'Yes' || echo 'No')"
          
          # Check for missing critical variables
          MISSING_VARS=""
          
          if [[ -z "$SHAREPOINT_ACCESS_TOKEN" && -z "$SHAREPOINT_REFRESH_TOKEN" ]]; then
            MISSING_VARS="${MISSING_VARS} SharePoint_tokens"
          fi
          
          if [[ -z "$EMAIL_PASSWORD" ]]; then
            MISSING_VARS="${MISSING_VARS} EMAIL_PASSWORD"
          fi
          
          if [[ -n "$MISSING_VARS" ]]; then
            echo "‚ùå Missing critical environment variables:$MISSING_VARS"
            echo "üí° Please ensure all required secrets are configured in GitHub repository settings."
            exit 1
          fi
          
          echo "‚úÖ Environment validation completed successfully"

      - name: Debug environment (optional)
        if: github.event.inputs.debug_mode == 'true'
        run: |
          echo "üîç Debug mode enabled - Extended environment check"
          echo "Current working directory: $(pwd)"
          echo "Available files:"
          ls -la
          echo ""
          echo "Python version: $(python --version)"
          echo "Pip version: $(pip --version)"
          echo ""
          echo "Environment variables (truncated for security):"
          env | grep -E '^(TENANT_ID|CLIENT_ID|GITHUB_)' | head -10
        
      - name: Run QA sampling automation script
        id: sampling_automation
        env:
          CI: true
        run: |
          echo "üöÄ Starting QA Sampling Automation with SharePoint integration..."
          echo "üìä Processing flow:"
          echo "  1. Connect to SharePoint"
          echo "  2. Download Sampling plan N√ÉM RAU.xlsx"
          echo "  3. Process sampling schedules"
          echo "  4. Update next sampling dates"
          echo "  5. Create summary report"
          echo "  6. Upload updated file to SharePoint"
          echo "  7. Send email notifications for due samples"
          echo ""
          
          # Run the sampling automation script and capture exit code
          python Nem.py 2>&1 | tee sampling_output.txt
          EXIT_CODE=${PIPESTATUS[0]}
          
          # Check if processing was successful (even if upload failed)
          if grep -q "Ho√†n th√†nh c·∫≠p nh·∫≠t th√†nh c√¥ng!" sampling_output.txt; then
            echo "‚úÖ QA Sampling automation completed successfully"
            echo "upload_success=true" >> $GITHUB_OUTPUT
          elif grep -q "Ho√†n th√†nh x·ª≠ l√Ω v·ªõi c·∫£nh b√°o" sampling_output.txt; then
            echo "‚ö†Ô∏è QA Sampling automation completed with warnings (file locked)"
            echo "upload_success=false" >> $GITHUB_OUTPUT
          elif [ $EXIT_CODE -eq 0 ]; then
            echo "‚úÖ QA Sampling automation completed"
            echo "upload_success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå QA Sampling automation failed (exit code: $EXIT_CODE)"
            echo "upload_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Create sampling summary
        if: always()
        run: |
          echo "üìä Creating sampling summary..."
          
          if [ -f sampling_output.txt ]; then
            # Extract key metrics from output
            TOTAL_SAMPLES=$(grep -oP "T·ªïng s·ªë m·∫´u ƒë∆∞·ª£c theo d√µi: \K\d+" sampling_output.txt | tail -1 || echo "N/A")
            DUE_SAMPLES=$(grep -oP "M·∫´u ƒë·∫øn h·∫°n c·∫ßn l·∫•y: \K\d+" sampling_output.txt | tail -1 || echo "N/A")
            UPDATED_SHEETS=$(grep -oP "Sheets ƒë√£ x·ª≠ l√Ω: \K\d+" sampling_output.txt | tail -1 || echo "N/A")
            
            # Check upload status
            UPLOAD_STATUS="Unknown"
            if grep -q "Successfully uploaded updated sampling plan" sampling_output.txt; then
              UPLOAD_STATUS="‚úÖ Success"
            elif grep -q "Successfully uploaded backup file" sampling_output.txt; then
              UPLOAD_STATUS="‚ö†Ô∏è Backup uploaded (original locked)"
            elif grep -q "File remains locked" sampling_output.txt || grep -q "resourceLocked" sampling_output.txt; then
              UPLOAD_STATUS="‚ùå Failed (file locked)"
            elif grep -q "Failed to upload" sampling_output.txt; then
              UPLOAD_STATUS="‚ùå Failed"
            fi
            
            # Create summary report
            echo "## üìä QA Sampling Automation Summary" > sampling_summary.md
            echo "" >> sampling_summary.md
            echo "- **Status**: ${{ job.status }}" >> sampling_summary.md
            echo "- **Total Samples Tracked**: $TOTAL_SAMPLES" >> sampling_summary.md
            echo "- **Due Samples**: $DUE_SAMPLES" >> sampling_summary.md
            echo "- **Updated Sheets**: $UPDATED_SHEETS" >> sampling_summary.md
            echo "- **Upload Status**: $UPLOAD_STATUS" >> sampling_summary.md
            echo "" >> sampling_summary.md
            echo "### üìÖ Processing Time" >> sampling_summary.md
            echo "- **Date**: $(date -u +'%Y-%m-%d')" >> sampling_summary.md
            echo "- **Time**: $(date -u +'%H:%M:%S %Z')" >> sampling_summary.md
            echo "- **Vietnam Time**: $(TZ='Asia/Ho_Chi_Minh' date +'%Y-%m-%d %H:%M:%S %Z')" >> sampling_summary.md
            echo "" >> sampling_summary.md
            echo "### üîÑ Data Source" >> sampling_summary.md
            echo "- **Platform**: SharePoint" >> sampling_summary.md
            echo "- **File**: Sampling plan N√ÉM RAU.xlsx" >> sampling_summary.md
            echo "- **Site**: MCH.MMB.QA" >> sampling_summary.md
            
            # Add troubleshooting info if upload failed
            if [[ "$UPLOAD_STATUS" == *"Failed"* ]] || [[ "$UPLOAD_STATUS" == *"locked"* ]]; then
              echo "" >> sampling_summary.md
              echo "### ‚ö†Ô∏è Upload Issue" >> sampling_summary.md
              echo "The file could not be updated due to SharePoint lock." >> sampling_summary.md
              echo "This typically happens when someone has the file open." >> sampling_summary.md
              echo "**Action**: Close the file in SharePoint and re-run the workflow." >> sampling_summary.md
            fi
            
            echo "‚úÖ Sampling summary created"
          else
            echo "‚ö†Ô∏è No sampling output found"
            echo "## ‚ùå Sampling Automation Failed" > sampling_summary.md
            echo "No output file was generated during the sampling process." >> sampling_summary.md
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-sampling-results-${{ github.run_number }}
          path: |
            sampling_output.txt
            sampling_summary.md
            *.png
            *.xlsx
          if-no-files-found: ignore

      - name: Sampling success notification
        if: success()
        run: |
          echo "‚úÖ QA Sampling Automation completed!"
          echo ""
          echo "üéØ Results:"
          if [ -f sampling_summary.md ]; then
            cat sampling_summary.md
          fi
          echo ""
          echo "üìç Data location:"
          echo "  - SharePoint: Sampling plan N√ÉM RAU.xlsx"
          echo "  - Site: MCH.MMB.QA"
          echo ""
          
          # Check upload status
          if [ "${{ steps.sampling_automation.outputs.upload_success }}" = "false" ]; then
            echo "‚ö†Ô∏è Note: File upload failed due to SharePoint lock"
            echo "üí° Action required:"
            echo "  1. Check if someone has the file open in SharePoint"
            echo "  2. Close the file and run the workflow again"
            echo "  3. Or manually apply the updates from backup file"
          else
            echo "‚úÖ File successfully updated in SharePoint"
          fi
          
          echo ""
          echo "üìß Email notifications sent to:"
          echo "  - ktcnnemmb@msc.masangroup.com"
          echo ""
          echo "üîÑ Next scheduled run: Tomorrow at 7:00 AM Vietnam time"

      - name: Sampling failure notification
        if: failure()
        run: |
          echo "‚ùå QA Sampling Automation failed!"
          echo ""
          echo "üîç Common troubleshooting steps:"
          echo "1. Check if all required secrets are configured:"
          echo "   - SHAREPOINT_ACCESS_TOKEN"
          echo "   - SHAREPOINT_REFRESH_TOKEN" 
          echo "   - EMAIL_PASSWORD"
          echo "   - GITHUB_TOKEN"
          echo ""
          echo "2. SharePoint file access issues:"
          echo "   - Verify SharePoint permissions for Sampling plan file"
          echo "   - Check if file is locked/open by another user"
          echo "   - Ensure file ID '0D5DEB9D-23AE-5C76-0C64-9FAB248215DE' is correct"
          echo ""
          echo "3. Data processing issues:"
          echo "   - Check file structure matches expected format"
          echo "   - Verify column names in Excel sheets"
          echo "   - Ensure date formats are readable"
          echo ""
          echo "4. Email configuration:"
          echo "   - Check email SMTP configuration"
          echo "   - Verify EMAIL_PASSWORD secret"
          echo ""
          echo "üìã Please review the workflow logs and artifacts for detailed error information."
          echo "üí° If file is locked, try running the workflow again after closing the file."

      - name: Cleanup temporary files
        if: always()
        run: |
          echo "üßπ Cleaning up temporary files..."
          rm -f *.tmp
          rm -f temp_*.png
          echo "‚úÖ Cleanup completed"
