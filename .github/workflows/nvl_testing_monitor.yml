name: Run Raw Material Testing Monitor

on:
  schedule:
    # Run weekly on Monday at 2:00 AM UTC (9:00 AM Vietnam time)
    - cron: '0 2 * * 1'
    # Optional: Run more frequently during critical periods
    # - cron: '0 2 * * 1,3,5'  # Monday, Wednesday, Friday
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-nvl-testing:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-nvl-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-nvl-
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install all required dependencies for Microsoft Graph API integration
        pip install msal>=1.20.0
        pip install requests>=2.25.1
        pip install pandas>=1.3.0
        pip install gspread>=5.7.0
        pip install google-auth>=2.6.0
        pip install google-auth-oauthlib>=0.4.6
        pip install google-auth-httplib2>=0.1.0
        pip install openpyxl>=3.0.9
        pip install xlsxwriter>=3.0.0
        pip install matplotlib>=3.5.0
        pip install PyNaCl>=1.5.0
        pip install python-dateutil>=2.8.2
        
    - name: Set up Google Sheets authentication
      run: |
        echo '${{ secrets.GOOGLE_TOKEN_JSON }}' > token.json
      
    - name: Verify environment setup
      run: |
        echo "Checking Python modules..."
        python -c "import msal; print('‚úÖ msal imported successfully')"
        python -c "import gspread; print('‚úÖ gspread imported successfully')"
        python -c "import pandas; print('‚úÖ pandas imported successfully')"
        python -c "import requests; print('‚úÖ requests imported successfully')"
        echo "Checking environment variables..."
        python -c "
        import os
        print('GOOGLE_TOKEN_JSON:', '‚úÖ SET' if os.environ.get('GOOGLE_TOKEN_JSON') else '‚ùå NOT SET')
        print('SHAREPOINT_ACCESS_TOKEN:', '‚úÖ SET' if os.environ.get('SHAREPOINT_ACCESS_TOKEN') else '‚ùå NOT SET')
        print('SHAREPOINT_REFRESH_TOKEN:', '‚úÖ SET' if os.environ.get('SHAREPOINT_REFRESH_TOKEN') else '‚ùå NOT SET')
        "
      
    - name: Run periodic testing monitor
      run: |
        echo "üöÄ Starting NVL Periodic Testing Monitor..."
        python nvl_periodic_testing.py
        echo "‚úÖ NVL Periodic Testing Monitor completed successfully"
      env:
        # CI environment flags
        CI: true
        GITHUB_ACTIONS: true
        
        # Google Sheets authentication
        GOOGLE_TOKEN_JSON: ${{ secrets.GOOGLE_TOKEN_JSON }}
        
        # Microsoft Graph API authentication (for Outlook email)
        SHAREPOINT_ACCESS_TOKEN: ${{ secrets.SHAREPOINT_ACCESS_TOKEN }}
        SHAREPOINT_REFRESH_TOKEN: ${{ secrets.SHAREPOINT_REFRESH_TOKEN }}
        
        # GitHub token for updating secrets (if token refresh is needed)
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        
    - name: Upload debug artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: nvl-testing-debug-logs-${{ github.run_number }}
        path: |
          *.log
          *.xlsx
          *.json
          token.json
        retention-days: 7
        
    - name: Clean up temporary files
      if: always()
      run: |
        echo "üßπ Cleaning up temporary files..."
        rm -f token.json
        rm -f *.xlsx
        rm -f *.log
        echo "‚úÖ Cleanup completed"
        
    - name: Report status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ NVL Periodic Testing Monitor workflow completed successfully!"
          echo "üìß Email reports have been sent to specified recipients"
          echo "üìä Excel reports have been generated and attached"
        else
          echo "‚ùå NVL Periodic Testing Monitor workflow failed"
          echo "üí° Check the logs above for error details"
          echo "üí° Debug artifacts have been uploaded for investigation"
        fi
