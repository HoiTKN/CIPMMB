name: QA Data Processing with Auto Token Refresh

on:
  schedule:
    # Run daily at 7:00 AM Vietnam time (00:00 UTC)
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'

env:
  TENANT_ID: '81060475-7e7f-4ede-8d8d-bf61f53ca528'
  CLIENT_ID: '076541aa-c734-405e-8518-ed52b67f8cbd'
  SHAREPOINT_ACCESS_TOKEN: ${{ secrets.SHAREPOINT_ACCESS_TOKEN }}
  SHAREPOINT_REFRESH_TOKEN: ${{ secrets.SHAREPOINT_REFRESH_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  qa-data-processing:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        echo "üì¶ Installing Python dependencies..."
        python -m pip install --upgrade pip
        
        # Install required packages
        pip install pandas openpyxl requests msal
        
        # Install PyNaCl for GitHub Secrets encryption (if auto-update is needed)
        pip install pynacl
        
        # Show installed packages
        pip list
        
    - name: Debug environment (optional)
      if: github.event.inputs.debug_mode == 'true'
      run: |
        echo "üîç Debug mode enabled"
        echo "Environment variables:"
        echo "TENANT_ID: ${TENANT_ID:0:8}..."
        echo "CLIENT_ID: ${CLIENT_ID:0:8}..."
        echo "Has ACCESS_TOKEN: $([[ -n "$SHAREPOINT_ACCESS_TOKEN" ]] && echo 'Yes' || echo 'No')"
        echo "Has REFRESH_TOKEN: $([[ -n "$SHAREPOINT_REFRESH_TOKEN" ]] && echo 'Yes' || echo 'No')"
        echo "Has GITHUB_TOKEN: $([[ -n "$GITHUB_TOKEN" ]] && echo 'Yes' || echo 'No')"

    - name: Test token validity
      id: test_token
      run: |
        echo "üîç Testing token validity..."
        python -c "
import requests
import os
import sys

access_token = os.environ.get('SHAREPOINT_ACCESS_TOKEN')
if not access_token:
    print('‚ùå No access token found')
    sys.exit(1)

headers = {
    'Authorization': f'Bearer {access_token}',
    'Content-Type': 'application/json'
}

try:
    response = requests.get('https://graph.microsoft.com/v1.0/me', headers=headers, timeout=30)
    if response.status_code == 200:
        user_info = response.json()
        print(f'‚úÖ Token is valid. User: {user_info.get(\"displayName\", \"Unknown\")}')
        sys.exit(0)
    else:
        print(f'‚ùå Token is invalid or expired. Status code: {response.status_code}')
        sys.exit(1)
except Exception as e:
    print(f'‚ùå Error testing token: {str(e)}')
    sys.exit(1)
        "
      continue-on-error: true

    - name: Run QA Data Processing
      run: |
        echo "üè≠ Starting QA Data Processing with enhanced delegation flow..."
        echo "Processing files from SharePoint (CORRECTED structure):"
        echo " - Sample ID.xlsx = SOURCE SHEET (ID AQL, AQL g√≥i, AQL T√¥ ly data)"
        echo " - Data SX.xlsx = SAMPLE ID SHEET (VHM and % Hao h·ª•t OPP data)"
        echo " - Output: CF data.xlsx = DESTINATION SHEET"
        echo "üìã This matches the Visual.py logic:"
        echo " source_sheet -> Sample ID.xlsx (multi-sheet Excel)"
        echo " sample_id_sheet -> Data SX.xlsx (VHM mapping)"
        echo " destination_sheet -> CF data.xlsx (output)"
        
        # Test imports
        echo "üîç Testing Python imports..."
        python -c "import pandas, os, sys, io, requests, datetime, msal, time, json, base64, traceback; print('‚úÖ All imports successful')"
        
        # Test config import
        echo "üîç Testing config import..."
        python -c "
from config_delegation import GRAPH_API_CONFIG, SHAREPOINT_CONFIG, FILE_PATHS, OUTPUT_CONFIG, QA_CONFIG, SHAREPOINT_FILE_IDS, TOKEN_CONFIG
print('‚úÖ Config import successful')
print(f'SHAREPOINT_FILE_IDS: {SHAREPOINT_FILE_IDS}')
print('üìã File structure (CORRECTED):')
print(f' sample_id (SOURCE): {SHAREPOINT_FILE_IDS[\"sample_id\"]}')
print(f' data_sx (SAMPLE ID): {SHAREPOINT_FILE_IDS[\"data_sx\"]}')
print(f' cf_data_output (DEST): {SHAREPOINT_FILE_IDS[\"cf_data_output\"]}')
        "
        
        # Run main script
        echo "üöÄ Running main processing script..."
        python Visual_SharePoint_Delegation.py 2>&1 | tee processing_output.txt
        
        # Check exit code
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
          echo "‚úÖ QA Data Processing completed successfully!"
        else
          echo "‚ùå QA Data Processing failed (exit code: ${PIPESTATUS[0]})"
          echo "üìã Full error output above"
          exit 1
        fi

    - name: Create processing summary
      if: always()
      run: |
        echo "üìä Creating processing summary..."
        if [ -f processing_output.txt ]; then
          # Extract key metrics from output
          TOTAL_RECORDS=$(grep -oP "Total records: \K\d+" processing_output.txt || echo "0")
          DEFECT_RECORDS=$(grep -oP "Records with defects: \K\d+" processing_output.txt || echo "0")
          ZERO_DEFECT_RECORDS=$(grep -oP "Zero-defect records: \K\d+" processing_output.txt || echo "0")
          
          # Create summary
          echo "## üìä Processing Summary" > processing_summary.md
          echo "" >> processing_summary.md
          echo "- **Total Records Processed**: $TOTAL_RECORDS" >> processing_summary.md
          echo "- **Records with Defects**: $DEFECT_RECORDS" >> processing_summary.md
          echo "- **Zero-Defect Records**: $ZERO_DEFECT_RECORDS" >> processing_summary.md
          echo "" >> processing_summary.md
          echo "### üìÖ Processing Time" >> processing_summary.md
          echo "- **Date**: $(date +'%Y-%m-%d')" >> processing_summary.md
          echo "- **Time**: $(date +'%H:%M:%S %Z')" >> processing_summary.md
          
          echo "‚úÖ Enhanced processing summary created"
        else
          echo "‚ö†Ô∏è No processing output found"
        fi

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: qa-processing-results-${{ github.run_number }}
        path: |
          processing_output.txt
          processing_summary.md
          *.log

    - name: Send notification on failure
      if: failure()
      run: |
        echo "‚ùå QA Data Processing failed!"
        echo "Please check the workflow logs for details."
        # You can add email notification or Slack webhook here if needed

    - name: Send notification on success
      if: success()
      run: |
        echo "‚úÖ QA Data Processing completed successfully!"
        if [ -f processing_summary.md ]; then
          cat processing_summary.md
        fi
        # You can add email notification or Slack webhook here if needed

    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up temporary files..."
        rm -f processing_output.txt
        rm -f *.log
        echo "‚úÖ Cleanup completed"
