name: QA Data Processing - SharePoint Delegation Flow (Daily)

on:
  # Chạy hàng ngày lúc 8:00 AM Vietnam time (1:00 AM UTC)
  schedule:
    - cron: '0 1 * * *'
  
  # Cho phép chạy thủ công
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: 'false'
        type: boolean
      test_mode:
        description: 'Test mode - limited processing'
        required: false
        default: 'false'
        type: boolean

jobs:
  sharepoint-delegation-processing:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas>=1.5.0 openpyxl>=3.0.0 requests>=2.28.0 msal>=1.24.0
    
    - name: 🔍 Verify environment and dependencies
      run: |
        echo "Python version: $(python --version)"
        echo "Current directory: $(pwd)"
        echo "Files in directory: $(ls -la)"
        pip list | grep -E "(pandas|msal|requests|openpyxl)"
        echo "Environment check complete"
    
    - name: 🔧 Validate delegation configuration
      env:
        TENANT_ID: ${{ secrets.TENANT_ID }}
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        SHAREPOINT_ACCESS_TOKEN: ${{ secrets.SHAREPOINT_ACCESS_TOKEN }}
        SHAREPOINT_REFRESH_TOKEN: ${{ secrets.SHAREPOINT_REFRESH_TOKEN }}
        SHAREPOINT_SITE_URL: ${{ secrets.SHAREPOINT_SITE_URL }}
        DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
      run: |
        echo "🧪 Validating delegation flow configuration..."
        echo "Tenant ID: ${TENANT_ID:0:8}..."
        echo "Client ID: ${CLIENT_ID:0:8}..."
        
        # Check if access token exists
        if [ -z "$SHAREPOINT_ACCESS_TOKEN" ]; then
          echo "❌ SHAREPOINT_ACCESS_TOKEN not found in GitHub Secrets"
          exit 1
        else
          echo "✅ Access Token: ${SHAREPOINT_ACCESS_TOKEN:0:20}..."
        fi
        
        # Check if refresh token exists
        if [ -n "$SHAREPOINT_REFRESH_TOKEN" ]; then
          echo "✅ Refresh Token: ${SHAREPOINT_REFRESH_TOKEN:0:20}..."
        else
          echo "⚠️ Refresh Token: Not provided (optional but recommended)"
        fi
        
        echo "SharePoint Site: $SHAREPOINT_SITE_URL"
        echo "Debug Mode: $DEBUG_MODE"
        echo "Test Mode: $TEST_MODE"
        
        # Test basic imports
        python -c "
        import msal
        import requests
        import pandas as pd
        import openpyxl
        print('✅ All required imports successful')
        
        # Test MSAL public client setup
        try:
            app = msal.PublicClientApplication(
                '$CLIENT_ID',
                authority='https://login.microsoftonline.com/$TENANT_ID'
            )
            print('✅ MSAL PublicClientApplication created successfully')
        except Exception as e:
            print(f'❌ MSAL setup failed: {e}')
            exit(1)
        "
    
    - name: 🔑 Test delegation authentication
      id: auth_test
      env:
        TENANT_ID: ${{ secrets.TENANT_ID }}
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        SHAREPOINT_ACCESS_TOKEN: ${{ secrets.SHAREPOINT_ACCESS_TOKEN }}
        SHAREPOINT_REFRESH_TOKEN: ${{ secrets.SHAREPOINT_REFRESH_TOKEN }}
        SHAREPOINT_SITE_URL: ${{ secrets.SHAREPOINT_SITE_URL }}
      run: |
        echo "🔑 Testing delegation authentication..."
        
        # Test access token validity
        python -c "
        import requests
        import os
        import sys
        
        access_token = os.environ.get('SHAREPOINT_ACCESS_TOKEN')
        
        if not access_token:
            print('❌ No access token found')
            sys.exit(1)
        
        print(f'🔍 Testing access token: {access_token[:30]}...')
        
        # Test token with Graph API
        headers = {'Authorization': f'Bearer {access_token}'}
        
        # Test basic user info
        try:
            response = requests.get('https://graph.microsoft.com/v1.0/me', headers=headers, timeout=30)
            
            if response.status_code == 200:
                user_info = response.json()
                print(f'✅ Authentication successful for user: {user_info.get(\"displayName\", \"Unknown\")}')
                
                # Test SharePoint site access
                site_url = 'https://graph.microsoft.com/v1.0/sites/masangroup.sharepoint.com:/sites/MCH.MMB.QA'
                site_response = requests.get(site_url, headers=headers, timeout=30)
                
                if site_response.status_code == 200:
                    site_data = site_response.json()
                    print(f'✅ SharePoint site access successful: {site_data.get(\"displayName\", \"Unknown\")}')
                    print('auth_result=success')
                else:
                    print(f'❌ SharePoint site access failed: {site_response.status_code}')
                    print(f'Response: {site_response.text[:200]}')
                    print('auth_result=site_access_failed')
                    
            elif response.status_code == 401:
                print('❌ Access token expired or invalid')
                print('💡 Need to regenerate tokens using generate_tokens.py')
                print('auth_result=token_expired')
            else:
                print(f'❌ Authentication test failed: {response.status_code}')
                print(f'Response: {response.text[:200]}')
                print('auth_result=auth_failed')
                
        except requests.exceptions.RequestException as e:
            print(f'❌ Network error during authentication test: {str(e)}')
            print('auth_result=network_error')
        except Exception as e:
            print(f'❌ Unexpected error during authentication test: {str(e)}')
            print('auth_result=unexpected_error')
        " > auth_output.txt 2>&1
        
        cat auth_output.txt
        
        if grep -q "auth_result=success" auth_output.txt; then
          echo "authentication_status=success" >> $GITHUB_OUTPUT
        elif grep -q "auth_result=token_expired" auth_output.txt; then
          echo "authentication_status=token_expired" >> $GITHUB_OUTPUT
        elif grep -q "auth_result=site_access_failed" auth_output.txt; then
          echo "authentication_status=site_access_failed" >> $GITHUB_OUTPUT
        elif grep -q "auth_result=network_error" auth_output.txt; then
          echo "authentication_status=network_error" >> $GITHUB_OUTPUT
        else
          echo "authentication_status=failed" >> $GITHUB_OUTPUT
        fi
    
    - name: 🏭 Run QA Data Processing
      id: qa_processing
      if: steps.auth_test.outputs.authentication_status == 'success'
      env:
        TENANT_ID: ${{ secrets.TENANT_ID }}
        CLIENT_ID: ${{ secrets.CLIENT_ID }}
        SHAREPOINT_ACCESS_TOKEN: ${{ secrets.SHAREPOINT_ACCESS_TOKEN }}
        SHAREPOINT_REFRESH_TOKEN: ${{ secrets.SHAREPOINT_REFRESH_TOKEN }}
        SHAREPOINT_SITE_URL: ${{ secrets.SHAREPOINT_SITE_URL }}
        DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
      run: |
        echo "🏭 Starting QA Data Processing with delegation flow..."
        echo "Processing files from SharePoint:"
        echo "  - Sample ID.xlsx (VHM and % Hao hụt OPP data)"
        echo "  - Data SX.xlsx (ID AQL, AQL gói, AQL Tô ly data)"
        echo "  - Output: CF data.xlsx"
        
        # Run the main processing script
        python Visual_SharePoint_Delegation.py > processing_output.txt 2>&1
        processing_exit_code=$?
        
        # Display output
        cat processing_output.txt
        
        # Check if processing was successful
        if [ $processing_exit_code -eq 0 ] && grep -q "Data processing completed successfully" processing_output.txt; then
          echo "processing_status=success" >> $GITHUB_OUTPUT
          echo "✅ QA Data Processing completed successfully!"
        else
          echo "processing_status=failed" >> $GITHUB_OUTPUT
          echo "❌ QA Data Processing failed (exit code: $processing_exit_code)"
          echo "📋 Check processing_output.txt for error details"
          exit 1
        fi
    
    - name: 📊 Generate processing summary
      if: always()
      env:
        AUTH_STATUS: ${{ steps.auth_test.outputs.authentication_status }}
        PROCESSING_STATUS: ${{ steps.qa_processing.outputs.processing_status }}
      run: |
        echo "📊 Creating processing summary..."
        
        # Create summary files
        mkdir -p output
        
        # Create processing summary
        cat > output/delegation_summary.json << EOF
        {
          "timestamp": "$(date -Iseconds)",
          "workflow_run": "${{ github.run_number }}",
          "repository": "${{ github.repository }}",
          "authentication_method": "delegation_flow",
          "authentication_status": "$AUTH_STATUS",
          "processing_status": "$PROCESSING_STATUS",
          "files_processed": [
            "Sample ID.xlsx",
            "Data SX.xlsx"
          ],
          "output_file": "CF data.xlsx",
          "schedule": "Daily at 8:00 AM Vietnam time",
          "notes": "Delegation flow - no CLIENT_SECRET required"
        }
        EOF
        
        echo "✅ Delegation processing summary created"
    
    - name: 📁 Upload processing logs and summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: qa-delegation-processing-${{ github.run_number }}
        path: |
          output/
          *.txt
          *.json
          *.log
        retention-days: 30
    
    - name: 📋 Create workflow summary
      if: always()
      env:
        AUTH_STATUS: ${{ steps.auth_test.outputs.authentication_status }}
        PROCESSING_STATUS: ${{ steps.qa_processing.outputs.processing_status }}
      run: |
        echo "## 🏭 QA Data Processing - SharePoint Delegation Flow" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Run Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
        echo "**Run Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Authentication**: Delegation Flow (No CLIENT_SECRET)" >> $GITHUB_STEP_SUMMARY
        echo "**Test Mode**: ${{ github.event.inputs.test_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Authentication status
        echo "### 🔑 Authentication Status:" >> $GITHUB_STEP_SUMMARY
        if [ "$AUTH_STATUS" = "success" ]; then
          echo "- ✅ **Delegation Authentication**: SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **SharePoint Access**: Available" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Token Status**: Valid" >> $GITHUB_STEP_SUMMARY
        elif [ "$AUTH_STATUS" = "token_expired" ]; then
          echo "- ⚠️ **Delegation Authentication**: TOKEN EXPIRED" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **SharePoint Access**: Not available" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 **Action**: Regenerate tokens" >> $GITHUB_STEP_SUMMARY
        elif [ "$AUTH_STATUS" = "site_access_failed" ]; then
          echo "- ⚠️ **Delegation Authentication**: SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **SharePoint Access**: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 **Action**: Check SharePoint permissions" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Delegation Authentication**: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **SharePoint Access**: Not available" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Processing status
        echo "### 📊 Data Processing Status:" >> $GITHUB_STEP_SUMMARY
        if [ "$PROCESSING_STATUS" = "success" ]; then
          echo "- ✅ **Data Download**: Sample ID.xlsx and Data SX.xlsx" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Data Processing**: VHM mapping and defect analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Data Upload**: CF data.xlsx updated in SharePoint" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Comprehensive Dataset**: Created with zero-defect records" >> $GITHUB_STEP_SUMMARY
        elif [ "$AUTH_STATUS" = "success" ]; then
          echo "- ❌ **Data Processing**: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **Error**: Check processing logs for details" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⏭️ **Data Processing**: SKIPPED (Authentication not successful)" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Success message
        if [ "$AUTH_STATUS" = "success" ] && [ "$PROCESSING_STATUS" = "success" ]; then
          echo "### 🎉 Success!" >> $GITHUB_STEP_SUMMARY
          echo "QA data processing completed successfully using delegation flow. No CLIENT_SECRET required!" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Download Results:" >> $GITHUB_STEP_SUMMARY
        echo "Check the **Artifacts** section below to download processing logs and summary." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [ "$AUTH_STATUS" = "success" ] && [ "$PROCESSING_STATUS" = "success" ]; then
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**🎯 Status: QA DATA PROCESSING COMPLETED (DELEGATION FLOW)** 🎯" >> $GITHUB_STEP_SUMMARY
        elif [ "$AUTH_STATUS" = "token_expired" ]; then
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**⏰ Status: TOKEN EXPIRED - REGENERATE TOKENS AND RETRY** ⏰" >> $GITHUB_STEP_SUMMARY
        else
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**⚠️ Status: PROCESSING INCOMPLETE - CHECK LOGS FOR DETAILS** ⚠️" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 🎉 Final status report
      if: always()
      env:
        AUTH_STATUS: ${{ steps.auth_test.outputs.authentication_status }}
        PROCESSING_STATUS: ${{ steps.qa_processing.outputs.processing_status }}
      run: |
        echo ""
        echo "=================================="
        echo "🏭 QA DATA PROCESSING - DELEGATION FLOW"
        echo "=================================="
        echo ""
        echo "📊 FINAL STATUS REPORT:"
        echo "  🔑 Authentication: $AUTH_STATUS"
        echo "  📈 Data Processing: $PROCESSING_STATUS"
        echo "  🔐 Flow Type: Delegation (No CLIENT_SECRET)"
        echo ""
        
        if [ "$AUTH_STATUS" = "success" ] && [ "$PROCESSING_STATUS" = "success" ]; then
          echo "✅ SUCCESS: QA data processing completed with delegation flow!"
          echo "📁 SharePoint files updated:"
          echo "  - CF data.xlsx contains latest processed data"
          echo "  - No CLIENT_SECRET required - using delegated permissions"
          echo "  - User-based authentication with access tokens"
        elif [ "$AUTH_STATUS" = "token_expired" ]; then
          echo "⏰ TOKEN EXPIRED: Access token needs refresh"
          echo "🔧 Action required:"
          echo "  1. Run generate_tokens.py locally"
          echo "  2. Update SHAREPOINT_ACCESS_TOKEN in GitHub Secrets"
          echo "  3. Re-run this workflow"
        elif [ "$AUTH_STATUS" = "site_access_failed" ]; then
          echo "⚠️ SITE ACCESS FAILED: Authentication OK but can't access SharePoint"
          echo "🔧 Check SharePoint permissions and site URL"
        elif [ "$AUTH_STATUS" = "success" ]; then
          echo "⚠️ PARTIAL SUCCESS: Authentication OK, but processing failed"
          echo "📋 Check processing logs for error details"
        else
          echo "❌ FAILED: Delegation authentication unsuccessful"
          echo "🔧 Check tokens and regenerate if needed"
        fi
        
        echo ""
        echo "💡 DELEGATION FLOW BENEFITS:"
        echo "  ✅ No CLIENT_SECRET required"
        echo "  ✅ User-based permissions"
        echo "  ✅ Simplified setup"
        echo "  ⚠️ Tokens need periodic refresh"
        echo ""
        echo "📅 Next scheduled run: Tomorrow at 8:00 AM Vietnam time"
        echo "🔄 Manual trigger available via workflow dispatch"
        echo ""
        echo "=================================="
